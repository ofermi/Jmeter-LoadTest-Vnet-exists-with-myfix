trigger: none

pool:
  vmImage: 'ubuntu-18.04'

variables:
- group: JMETER_TERRAFORM_SETTINGS
- name: JMETER_DIRECTORY_INPUT
  value: $(System.DefaultWorkingDirectory)/jmeter
- name: JMETER_DIRECTORY_OUTPUT
  value: $(System.DefaultWorkingDirectory)/results
- name: TERRAFORM_VERSION
  value: 0.13.2



steps:
- task: AzureCLI@2
  displayName: "Get Service Principal Variables"
  inputs:
    azureSubscription: $(AZURE_SERVICE_CONNECTION_NAME)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "##vso[task.setvariable variable=spId]$servicePrincipalId"
      echo "##vso[task.setvariable variable=spKey]$servicePrincipalKey"
      echo "##vso[task.setvariable variable=tid]$tenantId"
    addSpnToEnvironment: true
- task: PowerShell@2
  inputs:
    workingDirectory: ./terraform
    targetType: "inline"
    script: |
       Install-Module -Name Az.ContainerInstance  -force
        #  to install  all PS modules run:
        #  Install-Module Az -Scope CurrentUser -Force -Verbose -RequiredVersion 5.3.0
       $credential = New-Object System.Management.Automation.PSCredential ("${env:SPID}", (ConvertTo-SecureString ${env:SPKEY} -AsPlainText -Force))
       Connect-AzAccount -Credential $Credential -Tenant  ${env:TID} -ServicePrincipal
       $list_workers="jmeter-worker40,jmeter-worker41,jmeter-worker42,jmeter-worker43,jmeter-worker44,jmeter-worker45,jmeter-worker46,jmeter-worker47,jmeter-worker48,jmeter-worker49,jmeter-worker410,jmeter-worker411,jmeter-worker412,jmeter-worker413,jmeter-worker414,jmeter-worker415,jmeter-worker416,jmeter-worker417,jmeter-worker418,jmeter-worker419,jmeter-worker420,jmeter-worker421,jmeter-worker422,jmeter-worker423,jmeter-worker424,jmeter-worker425,jmeter-worker426,jmeter-worker427,jmeter-worker428,jmeter-worker429,jmeter-worker430,jmeter-worker431,jmeter-worker432,jmeter-worker433,jmeter-worker434,jmeter-worker435,jmeter-worker436,jmeter-worker437,jmeter-worker438,jmeter-worker439,jmeter-worker440,jmeter-worker441,jmeter-worker442,jmeter-worker443,jmeter-worker444,jmeter-worker445,jmeter-worker446,jmeter-worker447,jmeter-worker448,jmeter-worker449,jmeter-worker450,jmeter-worker451,jmeter-worker452,jmeter-worker453,jmeter-worker454,jmeter-worker455,jmeter-worker456,jmeter-worker457,jmeter-worker458,jmeter-worker459,jmeter-worker460,jmeter-worker461,jmeter-worker462,jmeter-worker463,jmeter-worker464,jmeter-worker465,jmeter-worker466,jmeter-worker467,jmeter-worker468,jmeter-worker469"
       # Defined parameters for If conditions:
        $cnt = 1
        $first_worker="Empty"
        $IP_LIST="Empty"
        $SubscriptionId= "f508da0c-a772-4029-adff-357809bf800c"
        $RG="jmeter-resources"
        $ContainerName="jmeter"
        $Worker_instance_name="Jmeter"

        foreach ($Worker_name in $list_workers.Split(","))
        {
            $connection_Jmeter=""
            echo "Worker_name=$Worker_name"
            Get-AzContainerInstanceLog -ContainerGroupName $Worker_name -ContainerName $ContainerName -ResourceGroupName $RG -SubscriptionId $SubscriptionId |grep 'Jmeter'| awk '{print $3}'
            echo "Worker_name=$Worker_name"
            $connection_Jmeter=Get-AzContainerInstanceLog -ContainerGroupName $Worker_name -ContainerName $ContainerName -ResourceGroupName $RG -SubscriptionId $SubscriptionId |grep 'Jmeter'| awk '{print $3}'
            echo "connection_Jmeter=$connection_Jmeter"
              if ("$connection_Jmeter" -eq $Worker_instance_name)
               {
                echo "Jmeter RUN on container instance $Worker_name"
                $worker_ip= Get-AzContainerGroup -Name $Worker_name  -ResourceGroupName $RG | fl |grep IPAddressIP |awk '{print $3}'
                echo "The $Worker_name ip=$worker_ip"
                if ($IP_LIST -eq $first_worker)  { 
                    $IP_LIST=$worker_ip
                    echo "first_worker=$first_worker"
                                 }
                else {
                    $IP_LIST=echo "$IP_LIST , $worker_ip"
                     }       
               } 
              else {
                 echo "$Worker_name was canceled"  
                   }
                
               echo "IP_LIST=$IP_LIST"
               sleep 3
               $cnt++
         }
        Remove-Item env:\SPKEY
        Remove-Item env:\SPID
        Remove-Item env:\TID

        $IP_LIST_No_SPACES="$IP_LIST"| awk '{ gsub(/ /,\"\"); print }'
        echo $IP_LIST_No_SPACES
        echo "##vso[task.setvariable variable=IP_LIST]$IP_LIST_No_SPACES"
  displayName: "check Workers connectivitiy "
   
